"""Connect4 Game for discord.py"""
# Â© 2017 Benjamin Mintz <bmintz@protonmail.com>
# Reused under MIT license <https://github.com/iomintz/connect4-bot/blob/master/LICENSE>
import asyncio
from itertools import chain, groupby
from typing import Union, Tuple, List
import logging

import discord
from discord.ext import commands

logger = logging.getLogger(__name__)

class Board(list):
	__slots__ = frozenset({'width', 'height'})

	def __init__(self, width: int, height: int):
		self.width: int = width
		self.height: int = height
		# 2D array of Zeroes
		for x in range(width):
			self.append([0] * height)

	def __getitem__(self, pos: Union[int, Tuple[int]]):
		if isinstance(pos, int):
			return list(self)[pos]
		elif isinstance(pos, tuple):
			x, y = pos
			return list(self)[x][y]
		else:
			raise TypeError('pos must be an int or tuple')

	def __setitem__(self, pos: Union[int, Tuple[int]], new_value):
		x, y = self._xy(pos)

		if self[x, y] != 0:
			raise IndexError("position already defined.")

		# basically self[x][y] = new_value
		# super().__getitem__(x).__setitem__(y, new_value)
		self[x][y] = new_value

	def _xy(self, pos: Union[int, Tuple[int]]) -> Tuple[int]:
		if isinstance(pos, tuple):
			return pos[0], pos[1]
		elif isinstance(pos, int):
			x = pos
			return x, self._y(x)
		else:
			raise TypeError('pos must be an int or tuple')

	def _y(self, x: int) -> int:
		"""find the lowest empty row for column x"""
		# start from the bottom and work up
		for y in range(self.height-1, -1, -1):
			if self[x, y] == 0:
				return y
		raise ValueError('Column is full.')

	def _pos_diagonals(self):
		"""Get positive diagonals, going from bottom-left to top-right."""
		for di in ([(j, i - j) for j in range(self.width)] for i in range(self.width + self.height - 1)):
			yield [self[i, j] for i, j in di if i >= 0 and j >= 0 and i < self.width and j < self.height]

	def _neg_diagonals(self):
		"""Get negative diagonals, going from top-left to bottom-right."""
		for di in ([(j, i - self.width + j + 1) for j in range(self.height)] for i in range(self.width + self.height - 1)):
			yield [self[i, j] for i, j in di if i >= 0 and j >= 0 and i < self.width and j < self.height]

	def _full(self) -> bool:
		"""Check if Board is full."""
		for x in range(self.width):
			if self[x, 0] == 0:
				return False
		return True


class Connect4Game:
	__slots__ = frozenset({'board', 'turn_count', '_whomst_forfeited', 'names'})

	FORFEIT: int = -2
	TIE: int = -1
	NO_WINNER: int = 0

	PIECES: List[str] = (
		u"\u2B1B"
		u'\U0001f7e5'
		u'\U0001f7e6'
	)

	def __init__(self, x, y, player1_name=None, player2_name=None):
		if player1_name is not None and player2_name is not None:
			self.names: Tuple[str] = (player1_name, player2_name)
		else:
			self.names: Tuple[str] = ('Player 1', 'Player 2')

		self.board: Board = Board(x, y)
		self.turn_count: int = 0
		self._whomst_forfeited = ""

	def move(self, column: int) -> None:
		self.board[column] = self.whomst_turn()
		self.turn_count += 1

	def forfeit(self) -> None:
		"""forfeit the game as the current player"""
		self._whomst_forfeited = self.whomst_turn_name()

	def _get_forfeit_status(self) -> str:
		if self._whomst_forfeited:
			status = '{} won \nAs {} forfeited.\n'

			return status.format(
				self.other_player_name(),
				self.whomst_turn_name()
			)

		raise ValueError('Nobody has forfeited')

	def build_embed(self) -> discord.Embed:
		win_status = self.whomst_won()
		status: str = self._get_status()
		instructions: str = self._get_instructions()

		if win_status == self.FORFEIT:
			status = self._get_forfeit_status()

		empty = "\n"
		# self._format_row(y) for y in range(self.board.height)
		return discord.Embed(title=status, description=f"{empty.join(map(lambda y: self._format_row(y), range(self.board.height)))}{empty}{instructions}")

	def __str__(self) -> str:
		win_status: int = self.whomst_won()
		status = self._get_status()
		instructions = ''

		if win_status == self.NO_WINNER:
			instructions = self._get_instructions()
		elif win_status == self.FORFEIT:
			status = self._get_forfeit_status()

		return (
			status
			+ instructions
			+ '\n'.join(self._format_row(y) for y in range(self.board.height))
		)

	def _get_status(self) -> str:
		win_status: int = self.whomst_won()

		if win_status == self.NO_WINNER:
			status = (self.whomst_turn_name() + "'s turn | "
				+ self.PIECES[self.whomst_turn()])
		elif win_status == self.TIE:
			status = "It's a tie!"
		elif win_status == self.FORFEIT:
			status = self._get_forfeit_status()
		else:
			status = self._get_player_name(win_status) + ' won!'
		return status + '\n'

	def _get_instructions(self) -> str:
		instructions: str = ''
		for i in range(1, self.board.width+1):
			instructions += str(i) + '\N{combining enclosing keycap}'
		return instructions + '\n'

	def _format_row(self, y: int):
		return ''.join(self[x, y] for x in range(self.board.width))

	def __getitem__(self, pos) -> str:
		x, y = pos
		return self.PIECES[self.board[x, y]]

	def whomst_won(self) -> int:
		"""Get the winner on the current board.
		If there's no winner yet, return Connect4Game.NO_WINNER.
		If it's a tie, return Connect4Game.TIE"""

		lines = (
			self.board, # columns
			zip(*self.board), # rows (zip picks the nth item from each column)
			self.board._pos_diagonals(), # positive diagonals
			self.board._neg_diagonals(), # negative diagonals
		)

		if self._whomst_forfeited:
			return self.FORFEIT

		for line in chain(*lines):
			for player, group in groupby(line):
				if player != 0 and len(list(group)) >= 4:
					return player

		if self.board._full():
			return self.TIE

		return self.NO_WINNER

	def other_player_name(self) -> str:
		return self._get_player_name(self.whomst_turn() + 1)

	def whomst_turn_name(self) -> str:
		return self._get_player_name(self.whomst_turn())

	def whomst_turn(self) -> int:
		return self.turn_count%2+1

	def _get_player_name(self, player_number) -> str:
		player_number -= 1 # these lists are 0-indexed but the players aren't

		return self.names[player_number]

class Connect4(commands.Cog):
	CANCEL_GAME_EMOJI: str = 'ðŸš«'
	DIGITS: List[str] = [str(digit) + '\N{combining enclosing keycap}' for digit in range(1, 8)]
	VALID_REACTIONS: List[str] = [CANCEL_GAME_EMOJI] + DIGITS
	GAME_TIMEOUT_THRESHOLD = 60

	def __init__(self, bot):
		self.bot = bot

	@commands.command(name="c4", aliases=["connect4", "con4"])
	async def c4(self, ctx, player2: discord.Member, x: int = 7, y: int = 6) -> None:
		"""Play connect4 with another player"""
		if x > 9 or y > 9:
			return await ctx.send("Board can\'t be bigger than 9x9")
		if x < 0 or y < 0:
			return await ctx.send("Board's diemensions")
		if player2.bot:
			return await ctx.send("You can\'t play with Bots!")
		# if player2 == ctx.author:
		# 	return await ctx.send("You can't play with yourself,\nthere is no fun in that.")

		player1: discord.Member = ctx.author

		game = Connect4Game(
			x,
			y,
			player1.display_name,
			player2.display_name,
		)

		message: discord.Message = await ctx.send(embed=game.build_embed())

		for digit in self.DIGITS:
			await message.add_reaction(digit)

		def check(reaction, user) -> bool:
			return (
				user == (player1, player2)[game.whomst_turn()-1]
				and str(reaction) in self.VALID_REACTIONS
				and reaction.message.id == message.id
			)

		while game.whomst_won() == game.NO_WINNER:
			try:
				reaction, user = await self.bot.wait_for(
					'reaction_add',
					check=check,
					timeout=self.GAME_TIMEOUT_THRESHOLD
				)
			except asyncio.TimeoutError:
				game.forfeit()
				break

			await asyncio.sleep(0.2)
			try:
				await message.remove_reaction(reaction, user)
			except discord.errors.Forbidden:
				pass

			if str(reaction) == self.CANCEL_GAME_EMOJI:
				game.forfeit()
				break

			try:
				# convert the reaction to a 0-indexed int and move in that column
				game.move(self.DIGITS.index(str(reaction)))
			except ValueError:
				pass # the column may be full

			await message.edit(embed=game.build_embed())

		await self.end_game(game, message)
		return None

	async def end_game(self, game: Connect4Game, message: discord.Message) -> None:
		await message.edit(embed=game.build_embed())
		await self.clear_reactions(message)
		return None

	@staticmethod
	async def clear_reactions(message: discord.Message) -> None:
		try:
			await message.clear_reactions()
		except discord.HTTPException:
			logger.warning("Failed to clear exceptions", exc_info=True)
		return None

def setup(bot):
	bot.add_cog(Connect4(bot))
