from typing import Tuple, Iterable, Optional, List, Any
from itertools import chain

import discord
from discord.ext import commands
# Acronyms: ttt = Tic Tac Toe, 

class Partial2DList:
    def __init__(self, DiemensionX: Optional[int] = 3, DiemensionY: Optional[int] = 3):
        # Array_Size:: [ 
        #   {[(32*4)*(DiemensionY + 1) + 16*DiemensionX*DiemensionY]} bits 
        # ]
        self._array = list(map(lambda _: [*map(lambda _: None, range(DiemensionX))], range(DiemensionY)))
        self.height = DiemensionY
        self.width = DiemensionX

    def __getitem__(self, key: Tuple[int]):
        try:
            x, y = key
        except Exception:
            raise
        return self._array[y][x]

    def __setitem__(self, key: Tuple[int], value):
        try:
            x, y = key
        except Exception:
            raise
        self._array[y][x] = value

    def __iter__(self):
        """Iterate over the array vertically, horizontally"""
        array = self._array
        for T in array:
            yield T
        for i in range(self.width):
            yield [array[0][i], array[1][i], array[2][i]]
        

    def diagonal_slices(self):
        # !IMP:: [Do not iterate over the slices! Instead implement another generator]
        if not self.height == self.width:
            raise NotImplemented("Can not slice diagonally a non-square Array.")
        Diagonals = (
            [], # DESC:: [Top Right to Bottom left;
            []  #         Bottom Right to Top left]
            )
        for Diagonal in Diagonals:
            for i in range(self.width):
                Diagonal.append(self._array[i][i])
            yield Diagonal

    def __repr__(self):
        return repr(self._array)


class tttBoard:
    def __init__(self, identifiers: List[Any]):
        self._board = Partial2DList()
        self.ids = identifiers
        self.last_player = None

    def get_winner(self) -> Any:
        def _check_equal(i: list):
            element = i[0]
            if i.count(element) == len(i) and element is not None:
                return element
            else:
                return False
        Check = chain(map(_check_equal, self._board), map(_check_equal, self._board.diagonal_slices()))
        for Id in self.ids:
            if Id in Check:
                return Id
        else:
            return None
    
    def play(self, identifier, *, x: int, y: int):
        cleanX = x - 1
        cleanY = y - 1
        self._board[cleanX][cleanY] = identifier
        self.last_player = identifier

    def build_embed(self):
        board = self._board._array
        Xmarker = self.ids[0]
        Omarker = self.ids[1]
        for i in board:
            i = [x if x == Xmarker elif x == Ymarker for x in i]
                
                
class Ttt(commands.Cog):
    def __init__(bot):
        self.bot = bot

    @commands.command(name="ttt")
    async def _ttt(self, player2: discord.Member):
        pass